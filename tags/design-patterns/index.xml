<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design-patterns on</title><link>https://bbawj.github.io/site/tags/design-patterns/</link><description>Recent content in design-patterns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bbawj.github.io/site/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Injection</title><link>https://bbawj.github.io/site/Notes/Dependency-Injection/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://bbawj.github.io/site/Notes/Dependency-Injection/</guid><description>Dependency Injection #design-patterns
Problems we want to solve How can a class be independent from the creation of the objects it depends on?</description></item><item><title>Factory Pattern</title><link>https://bbawj.github.io/site/Notes/Factory-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://bbawj.github.io/site/Notes/Factory-Pattern/</guid><description>Factory Pattern #design-patterns
Problems we want to solve Decouple class selection and object creation from the place where the object is used.</description></item><item><title>Façade Pattern</title><link>https://bbawj.github.io/site/Notes/Fa%C3%A7ade-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://bbawj.github.io/site/Notes/Fa%C3%A7ade-Pattern/</guid><description>Façade Pattern #design-patterns
Problems we want to solve Decoupling of object interactions Open-closed principle Least Knowledge principle Pros Decouples client from complex system logic Reduces dependencies on classes: favour composition over inheritance Cons Complexity and possible rework</description></item><item><title>Observer Pattern</title><link>https://bbawj.github.io/site/Notes/Observer-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://bbawj.github.io/site/Notes/Observer-Pattern/</guid><description>Observer Pattern #design-patterns
Problems we want to solve Tight coupling due to a 1-many dependency We need a number of dependent objects to update automatically when one object changes state We need an object to notify a number of other objects Push / Pull Mechanisms **Pull</description></item><item><title>Strategy Pattern</title><link>https://bbawj.github.io/site/Notes/Strategy-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://bbawj.github.io/site/Notes/Strategy-Pattern/</guid><description>Strategy Pattern #design-patterns
Problems we want to solve A set of interchangeable algorithms or objects that can be decided at run-time Extensible set of strategies: Open-Closed Principle Context refers or uses the Strategy interface for performing the algorithm.</description></item></channel></rss>