<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://www.brendanang.dev/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.brendanang.dev/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Broadcast Abstractions</title><link>https://www.brendanang.dev/Notes/Broadcast-Abstractions/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Broadcast-Abstractions/</guid><description>Broadcast Abstractions Unreliable Broadcast Does not guarantee anything. Such events are allowed: Best Effort Broadcast Guarantees reliability only if sender is correct</description></item><item><title>Finite State Machines</title><link>https://www.brendanang.dev/Notes/Finite-State-Machines/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Finite-State-Machines/</guid><description>Finite State Machines</description></item><item><title>Distributed Abstractions</title><link>https://www.brendanang.dev/Notes/Distributed-Abstractions/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Distributed-Abstractions/</guid><description>Distributed Abstractions The basic building blocks of any distributed system is a set of distributed algorithms. which are implemented as a middleware between network (OS) and the application.</description></item><item><title>Failure Detectors</title><link>https://www.brendanang.dev/Notes/Failure-Detectors/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Failure-Detectors/</guid><description>Failure Detectors Properties Completeness No false negatives: all failed processes are suspected
Strong completeness Weak completeness Accuracy No false positives: correct processes are not suspected</description></item><item><title>Network Layer</title><link>https://www.brendanang.dev/Notes/Network-Layer/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Network-Layer/</guid><description>Network Layer The network layer offers logical communication between hosts, which is distinct from the logical communication from the Transport Layer.</description></item><item><title>Transport Layer</title><link>https://www.brendanang.dev/Notes/Transport-Layer/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Transport-Layer/</guid><description>Transport Layer The transport layer provides for logical communication between application processes running on different hosts. This means that application processes can send messages to each other without worrying about the details of the underlying physical infrastructure.</description></item><item><title>BitTorrent</title><link>https://www.brendanang.dev/Notes/BitTorrent/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/BitTorrent/</guid><description>BitTorrent The collection of all peers participating in the distribution of a particular file is called a torrent.
Peers in a torrent download equal-size chunks of the file from one another, with a typical chunk size of 256 kbytes.</description></item><item><title>Distributed Hash Table</title><link>https://www.brendanang.dev/Notes/Distributed-Hash-Table/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Distributed-Hash-Table/</guid><description>Distributed Hash Table A DHT is a distributed P2P database.
Each entry is a key-value pair (host, IP address). A peer queries the DHT with key, and it returns the value matching that key Peers can also insert pairs For example, it is used in BitTorrent&amp;rsquo;s distributed tracker, where the key is a torrent identifier and the value is the set of IP addresses in the torrent.</description></item><item><title>Application Layer</title><link>https://www.brendanang.dev/Notes/Application-Layer/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Application-Layer/</guid><description>Application Layer Network Application Architectures Examples:
Webmail Examples: File sharing Bittorrent CS vs P2P File Distribution Client Server The server must transmit one copy of the file to each of the N peers.</description></item><item><title>DNS</title><link>https://www.brendanang.dev/Notes/DNS/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/DNS/</guid><description>DNS Domain Name System is a distributed database implemented in a hierarchy of DNS servers, and an application layer protocol that allows hosts to query the database.</description></item><item><title>POP3</title><link>https://www.brendanang.dev/Notes/POP3/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/POP3/</guid><description>POP3 Post Office Protocol is used to transfer mail from the receiver&amp;rsquo;s mail server to the user agent. Download and delete mode: After the quit command, the server enters the update phase and removes the messages marked for deletion.</description></item><item><title>SMTP</title><link>https://www.brendanang.dev/Notes/SMTP/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/SMTP/</guid><description>SMTP Simple Mail Transfer Protocol transfers messages from senders&amp;rsquo; mail servers to receiver mail servers. [!Note] SMTP does not normally use intermediate mail servers, even when two mail servers are located on opposite ends of the world.</description></item><item><title>Building Blocks of the Internet</title><link>https://www.brendanang.dev/Notes/Building-Blocks-of-the-Internet/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Building-Blocks-of-the-Internet/</guid><description>Building Blocks of the Internet The internet consists of billions of end systems (hosts), connected together by a network of communication links and packet switches.</description></item><item><title>HTTP</title><link>https://www.brendanang.dev/Notes/HTTP/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/HTTP/</guid><description>Hypertext Transfer Protocol HTTP is the Web&amp;rsquo;s application layer protocol, above the transport or optional encryption layer. A Web page contains many objects and is addressable using a Uniform Resource Locator (URL): HTTP uses TCP as its underlying transport protocol.</description></item><item><title>Wireless Networks</title><link>https://www.brendanang.dev/Notes/Wireless-Networks/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Wireless-Networks/</guid><description>Wireless Networks Performance Fundamentals $$C=BW\times log_2(1+\frac{S}{N})$$
C is channel capacity, which is the maximum information rate BW is bandwith in Hz S is signal and N is noise in watts Bandwith Wireless communications run based on electromagnetic waves, and the bandwith is the frequency range over which this communication can occur.</description></item><item><title>Transport Layer Security</title><link>https://www.brendanang.dev/Notes/Transport-Layer-Security/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Transport-Layer-Security/</guid><description>Transport Layer Security A protocol designed to provide encryption, authentication and data integrity. It is a standardisation over [[SSL]].
Encryption: obfuscate what is sent from one computer to another Authentication: verify the validity of provided identificatin Integrity: detect message tampering and forgery TLS Handshake TLS runs ontop of an existing TCP connection.</description></item><item><title>101 Introduction To Algorithms</title><link>https://www.brendanang.dev/Notes/101-Introduction-To-Algorithms/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/101-Introduction-To-Algorithms/</guid><description>Introduction To Algorithms #book #moc This contains the map of contents to my set of notes and solutions to the problems laid out in the Introduction to Algorithms book.</description></item><item><title>A-Star Search</title><link>https://www.brendanang.dev/Notes/A-Star-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/A-Star-Search/</guid><description>A* Search Combines Greedy Best First Search h(n) with Uniform Cost Search g(n)
Evaluation function $$f(n)=g(n)+h(n)$$ Remember to take the full path cost in calculating g(n) for a node</description></item><item><title>Activity Diagrams</title><link>https://www.brendanang.dev/Notes/Activity-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Activity-Diagrams/</guid><description>Activity Diagram Flow chart of activities performed by the system.
Swimlanes PartitionÂ an activity diagram to show who is doing which action.</description></item><item><title>Alignment Problem</title><link>https://www.brendanang.dev/Notes/Alignment-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Alignment-Problem/</guid><description>Alignment Problem Problem Formulation Let $n1$ and $n2$ represent the position of the character in the respective subsequence S1 and S2.</description></item><item><title>Angular</title><link>https://www.brendanang.dev/Notes/Angular/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Angular/</guid><description>Angular A frontend development platform built on TypeScript.
Creating components 1 2 3 ng generate component &amp;lt;name&amp;gt; ng g c &amp;lt;name&amp;gt; Defining metadata A file in the form of &amp;lt;name&amp;gt;.</description></item><item><title>Arrays and Slices</title><link>https://www.brendanang.dev/Notes/Arrays-and-Slices/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Arrays-and-Slices/</guid><description>Arrays and Slices Arrays Slices Slice reallocation Deletion Pitfalls Since a slice is a pointer to an array, passing a slice into a function will allow the function to modify the original array.</description></item><item><title>ASP.NET Web API</title><link>https://www.brendanang.dev/Notes/ASP.NET-Web-API/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/ASP.NET-Web-API/</guid><description>ASP.NET Web API Routing Routing uses APIController Add an attribute to a controller class to tell the compiler that this is an APIController</description></item><item><title>B+ Tree Index</title><link>https://www.brendanang.dev/Notes/B+-Tree-Index/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/B+-Tree-Index/</guid><description>B+ Tree Index Idea: build a multi-layer index in the structure of a B-tree
[!Properties]
Each tree node is stored within a block Each node stores at most n+1 pointers and n keys Each level is an index - sorted within each node - sorted across nodes at the same level [!</description></item><item><title>B-tree</title><link>https://www.brendanang.dev/Notes/B-tree/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/B-tree/</guid><description>B-tree A self balancing tree data structure.
Consider a B-Tree of order n (here we use example of ):
Each orange box is a key Each blue line is a pointer to subtree This also means that each internal node has at least $\lfloor{n/2}\rfloor$ +1 children</description></item><item><title>Binary Search Tree</title><link>https://www.brendanang.dev/Notes/Binary-Search-Tree/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Binary-Search-Tree/</guid><description>Binary Search Trees BST property: Let x be a node in a binary search tree. If y is a node in the left subtree of x, then y.</description></item><item><title>Binary Tree</title><link>https://www.brendanang.dev/Notes/Binary-Tree/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Binary-Tree/</guid><description>Binary Trees A tree structure in which each node has at most 2 children.
1 2 3 4 5 6 7 8 class TreeNode { constructor(val, left, right, parent){ this.</description></item><item><title>Bitmap</title><link>https://www.brendanang.dev/Notes/Bitmap/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Bitmap/</guid><description>Bitmap A bitmap is a mapping from some domain (for example, a range of integers) to bits. It is stored in a bit array.</description></item><item><title>Black Box Testing</title><link>https://www.brendanang.dev/Notes/Black-Box-Testing/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Black-Box-Testing/</guid><description>Black Box Testing #testing
Testing of requirements and specifications
Assumptions:
Verifiable requirements (i.e. hire juniors on part time basis compared to hire those below 18 years old part time) Testable code [!</description></item><item><title>Bonds</title><link>https://www.brendanang.dev/Notes/Bonds/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Bonds/</guid><description>Bonds Terminologies Callability: Issuer can redeem the bond before maturity leads to higher risk to the investor, will mean that the bond will have **relatively higher YTM.</description></item><item><title>Boyer-Moore Algorithm</title><link>https://www.brendanang.dev/Notes/Boyer-Moore-Algorithm/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Boyer-Moore-Algorithm/</guid><description>Boyer-Moore Algorithm Definitions T denotes the input text to be searched. Its length is n. P denotes the string to be searched for, called the pattern.</description></item><item><title>Breadth First Search</title><link>https://www.brendanang.dev/Notes/Breadth-First-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Breadth-First-Search/</guid><description>Breadth First Search Graph Traversal Assuming ties are handled in alphabetical order
Expansion Order: A &amp;gt; B &amp;gt; C &amp;gt; D &amp;gt; E &amp;gt; G Final Path: A &amp;gt; C &amp;gt; G</description></item><item><title>Buffer Pools</title><link>https://www.brendanang.dev/Notes/Buffer-Pools/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Buffer-Pools/</guid><description>Buffer Pools An area of memory used as a buffer between the disk and the database system Page table A page table is used to keep track of the pages loaded in the buffer pool.</description></item><item><title>C</title><link>https://www.brendanang.dev/Notes/C/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/C/</guid><description>C Programming Special keywords Volatile 1 int volatile foo; Volatile is a qualifier that is applied to a variable when it is declared.</description></item><item><title>Cache</title><link>https://www.brendanang.dev/Notes/Cache/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Cache/</guid><description>Cache Memory Organisation Memory in cache is stored as cache lines. A CPU will try to access cache through a memory address: Instruction cache and Data cache Storing these separately will allow in better parallelism.</description></item><item><title>Cache Placement Policies</title><link>https://www.brendanang.dev/Notes/Cache-Placement-Policies/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Cache-Placement-Policies/</guid><description>Cache Placement Policies We need a way to decide where the data is placed when it is first copied into the cache where in the cache a copy of selected memory block will reside.</description></item><item><title>Cache Replacement Policies</title><link>https://www.brendanang.dev/Notes/Cache-Replacement-Policies/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Cache-Replacement-Policies/</guid><description>Cache Replacement Policies Which block should we replace if there is a cache miss? We need to choose a victim</description></item><item><title>Cache Write Policies</title><link>https://www.brendanang.dev/Notes/Cache-Write-Policies/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Cache-Write-Policies/</guid><description>Cache Write Policies How do we keep memory updated while writing on the cache?
Write-through Every write to the cache will lead to subsequent writes to the rest of the memory hierarchy, L1 -&amp;gt; L2 -&amp;gt; Main Memory -&amp;gt; Disk.</description></item><item><title>Capital Budgeting</title><link>https://www.brendanang.dev/Notes/Capital-Budgeting/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Capital-Budgeting/</guid><description>Capital Budgeting NPV Net Present Value: calculate the present value of future cash flows in order to whether a project is worth up taking $NPV_1\ge NPV_2$.</description></item><item><title>Chain Matrix Multiplication</title><link>https://www.brendanang.dev/Notes/Chain-Matrix-Multiplication/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Chain-Matrix-Multiplication/</guid><description>Chain Matrix Multiplication Problem Formulation Satisfaction of the Principle of Optimality: Let $A_i$ represent the $i^{th}$ matrix with dimensions $(d_{i-1}\times d_i)$.</description></item><item><title>Class Diagrams</title><link>https://www.brendanang.dev/Notes/Class-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Class-Diagrams/</guid><description>Class Diagrams Basic Notation Visibility Modifiers + : public - : private # : protected ~ : package private</description></item><item><title>Clean Code</title><link>https://www.brendanang.dev/Notes/Clean-Code/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Clean-Code/</guid><description>Clean Code - Notes Comments Explain yourself in code 1 2 //check to see if employee is elgiible for full benefits if (employee.</description></item><item><title>Clock (or Second Chance) Policy</title><link>https://www.brendanang.dev/Notes/Clock-or-Second-Chance-Policy/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Clock-or-Second-Chance-Policy/</guid><description>Clock Replacement Algorithm ## Idea 1. Keep a circular list of items in memory 2. A "clock hand" is used to suggest the next item for eviction 3.</description></item><item><title>Combinational Circuits</title><link>https://www.brendanang.dev/Notes/Combinational-Circuits/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Combinational-Circuits/</guid><description>Combinational Circuits Multiplexer A multiplexer is used to select 1 out of n inputs. Decoder A decoder is used to select a 1-hot output based on an n bit input.</description></item><item><title>Communication Diagrams</title><link>https://www.brendanang.dev/Notes/Communication-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Communication-Diagrams/</guid><description>Communication Diagrams</description></item><item><title>Complexity Analysis</title><link>https://www.brendanang.dev/Notes/Complexity-Analysis/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Complexity-Analysis/</guid><description>Complexity Analysis Asymptotic Notations Notations used to describe the order of growth of a given function
Big-O $O(f(x))$ The limits when taking the 2 functions to infinity produces a constant C that $$\begin{align}\lim_{n\to \infty}\frac{f(n)}{g(n)}=C \ C=0 \ or\ 0&amp;lt;C&amp;lt;\infty \end{align}$$</description></item><item><title>Computer Performance</title><link>https://www.brendanang.dev/Notes/Computer-Performance/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Computer-Performance/</guid><description>Computer Performance Execution time One indicator of performance is execution time of a program $$\text{Performance} = \frac{1}{\text{Execution Time}} = \frac{1}{time_{end} - time_{start}}$$ $$\text{Execution Time} = \text{Instruction Count} \times \text{Clocks Per Instruction} \times \text{Clock Period}$$</description></item><item><title>Computer Power</title><link>https://www.brendanang.dev/Notes/Computer-Power/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Computer-Power/</guid><description>Computer Power Power dissipation Dynamic Power Dissipated only when computation is performed Static Power Due to leakage current and dissipated whenever the system is powered on Thus, it is possible that heat reducing solutions like a heat sink can help to reduce powe consumption.</description></item><item><title>Concurrency Control</title><link>https://www.brendanang.dev/Notes/Concurrency-Control/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Concurrency-Control/</guid><description>Concurrency Control The DBMS needs to ensure consistency during concurrent execution of transactions, as concurrency can result in the database being in an inconsistent state despite preserving the correctness of transactions and without encountering a failure.</description></item><item><title>Constraint Satisfaction Problem</title><link>https://www.brendanang.dev/Notes/Constraint-Satisfaction-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Constraint-Satisfaction-Problem/</guid><description>Constraint Satisfaction Problem There are a set of constraints which specify the allowable combinations of values
Forward checking: Pre-emptively removes inconsistent values from the domains of neighbouring variables.</description></item><item><title>Context Switch</title><link>https://www.brendanang.dev/Notes/Context-Switch/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Context-Switch/</guid><description>Context Switch OS preserves the state of the CPU by storing registers and the Program Counter Context switch time is overhead: note that there is time spent where both processes are idle</description></item><item><title>Conventional Indexes</title><link>https://www.brendanang.dev/Notes/Conventional-Indexes/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Conventional-Indexes/</guid><description>Conventional Indexes Indexes are needed to reduce the I/O required to find a record.
Updating Indexes Locate the targeted record or the place to hold new record Update data file Update index Clustered and Non-Clustered Indexes Clustering index: indexes on an attribute is such that all the tuples with a fixed value for the search key of this index appear on as few blocks as can hold them.</description></item><item><title>Custom Computing</title><link>https://www.brendanang.dev/Notes/Custom-Computing/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Custom-Computing/</guid><description>Custom Computing Custom computers are special-purpose systems customised for specific applications such as signal processing and database operations, when general-purpose computers are too slow, too bulky or consume too much power.</description></item><item><title>Data Level Parallelism</title><link>https://www.brendanang.dev/Notes/Data-Level-Parallelism/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Data-Level-Parallelism/</guid><description>Data Level Parallelism The same operation is performed on multiple data values concurrently in multiple processing units. Can reduce the Instruction Count to enhance performance Processors Different types of hardware can support different levels of data parallelism.</description></item><item><title>Datapath and Control Design</title><link>https://www.brendanang.dev/Notes/Datapath-and-Control-Design/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Datapath-and-Control-Design/</guid><description> Instructions</description></item><item><title>Deadlocks</title><link>https://www.brendanang.dev/Notes/Deadlocks/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Deadlocks/</guid><description>Deadlocks A set of blocked processes each holding a resource and waiting to acquire a resource held by another process in the set An example with improper semaphore usage: Modelling Deadlocks Cyclic Properties of Deadlocks [!</description></item><item><title>Default Logic</title><link>https://www.brendanang.dev/Notes/Default-Logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Default-Logic/</guid><description>Default Logic Definitions Reiter Extension Makinson Approach Process Tree Algorithm A closed default is one that has been instantiated The In-set contains all the consequences from applying a default The Out-set contains all the negations of the justifications from applying a default: these are the predicates which cannot be proven true by the In-Set for the extension to be consistent</description></item><item><title>Dependency Injection</title><link>https://www.brendanang.dev/Notes/Dependency-Injection/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Dependency-Injection/</guid><description>Dependency Injection #design-patterns
Problems we want to solve How can a class be independent from the creation of the objects it depends on?</description></item><item><title>Depth First Search</title><link>https://www.brendanang.dev/Notes/Depth-First-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Depth-First-Search/</guid><description>Depth First Search Graph Traversal Assuming ties are handled in alphabetical order
Expansion Order: A &amp;gt; B &amp;gt; C &amp;gt; E &amp;gt; F &amp;gt; G Final Path: A &amp;gt; B &amp;gt; C &amp;gt; E &amp;gt; F &amp;gt; G</description></item><item><title>Dijkstra's Algorithm</title><link>https://www.brendanang.dev/Notes/Dijkstras-Algorithm/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Dijkstras-Algorithm/</guid><description>Dijkstra&amp;rsquo;s Algorithm Shortest Path Problem Find the shortest path from source to all other vertices.
[!NOTE] Adding a positive constant to all edges Dijkstra finds the shortest path in terms of the edge weights and not the number of edges.</description></item><item><title>Direct Memory Access</title><link>https://www.brendanang.dev/Notes/Direct-Memory-Access/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Direct-Memory-Access/</guid><description>Direct Memory Access (DMA) Feature that allows certain hardware subsystems to access main system memory independently of the central processing unit (CPU).</description></item><item><title>Disk</title><link>https://www.brendanang.dev/Notes/Disk/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Disk/</guid><description>Disk Disk Mechanics A disk is made up of multiple cylinders (platters) each with a set of tracks [!NOTE] Each platter consists of 2 surfaces which data can be read/written</description></item><item><title>Dynamic Loading</title><link>https://www.brendanang.dev/Notes/Dynamic-Loading/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Dynamic-Loading/</guid><description>Dynamic Loading Mechanism for loading a binary and execute functions from external software.
Allows program toÂ start up in the absence of these libraries, to discover available libraries, and to potentially gain additional functionality.</description></item><item><title>Factory Pattern</title><link>https://www.brendanang.dev/Notes/Factory-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Factory-Pattern/</guid><description>Factory Pattern #design-patterns
Problems we want to solve Decouple class selection and object creation from the place where the object is used.</description></item><item><title>FaÃ§ade Pattern</title><link>https://www.brendanang.dev/Notes/Fa%C3%A7ade-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Fa%C3%A7ade-Pattern/</guid><description>FaÃ§ade Pattern #design-patterns
Problems we want to solve Decoupling of object interactions Open-closed principle Least Knowledge principle Pros Decouples client from complex system logic Reduces dependencies on classes: favour composition over inheritance Cons Complexity and possible rework</description></item><item><title>Fibonacci Sequence</title><link>https://www.brendanang.dev/Notes/Fibonacci-Sequence/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Fibonacci-Sequence/</guid><description>Fibonacci Sequence Problem Formulation The Fibonacci Series: $$F_i=F_{i-1}+F_{i-2} $$
Strategy Pseudocode</description></item><item><title>File Systems</title><link>https://www.brendanang.dev/Notes/File-Systems/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/File-Systems/</guid><description>File Systems File A file is an unstructured sequence of bytes. Each byte is individually addressable from the beginning of the file.</description></item><item><title>First Order Logic</title><link>https://www.brendanang.dev/Notes/First-Order-Logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/First-Order-Logic/</guid><description>First Order Logic Propositional Logic can only deal with a finite number of propositions:
T: Tommy is faithful J: Jimmy is faithful L: Laika is faithful $All\ dogs\ are\ faithful\iff T\land J\land L$ What if there is an infinite/unknown number of dogs?</description></item><item><title>Game Theory</title><link>https://www.brendanang.dev/Notes/Game-Theory/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Game-Theory/</guid><description>Game Theory Any game with a finite number of actions will have a Nash Equilibrium
Pure Strategy set: a Nash equilibrium pure strategy exists if there are states which no party can gain a higher utility by choosing a separate action given that the other parties adhere to their current action.</description></item><item><title>Games as Search Problems</title><link>https://www.brendanang.dev/Notes/Games-as-Search-Problems/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Games-as-Search-Problems/</guid><description>Perfect information also means fully observable unlike in Poker where you cannot see the opponent&amp;rsquo;s hand.
Minimax Search Maximize own utility and minimize opponent&amp;rsquo;s</description></item><item><title>Go</title><link>https://www.brendanang.dev/Notes/Go/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Go/</guid><description>Go https://go.dev/doc/effective_go
Arrays and Slices Strings Maps</description></item><item><title>GPU Architecture</title><link>https://www.brendanang.dev/Notes/GPU-Architecture/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/GPU-Architecture/</guid><description>GPU Architecture The general purpose CPU is designed for single-threaded code optimised for low latency. The GPU allows us to achieve higher throughput in exchange for higher latency.</description></item><item><title>Greedy Best First Search</title><link>https://www.brendanang.dev/Notes/Greedy-Best-First-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Greedy-Best-First-Search/</guid><description>Greedy Search Expands the node that appears to be closest to the goal based on the evaluation function h(n) i.e. expands the lowest h(n) values first.</description></item><item><title>Grid World Scenario</title><link>https://www.brendanang.dev/Notes/Grid-World-Scenario/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Grid-World-Scenario/</guid><description/></item><item><title>Hardware Protection</title><link>https://www.brendanang.dev/Notes/Hardware-Protection/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Hardware-Protection/</guid><description>Hardware Protection Dual mode operation Differentiates between at least 2 modes of operations
User mode: execution of user processes Monitor mode (supervisor/system/kernel mode): execution of operating system processes [!</description></item><item><title>Hash Index</title><link>https://www.brendanang.dev/Notes/Hash-Index/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Hash-Index/</guid><description>Hash Index Idea: use a hash table
Take a search key and hash it into an integer in the range of 0 to B-1 where B is the number of buckets A bucket array holds the headers of B linked lists, one for each bucket If a record has search key K, store the record by linking it to bucket list number h(K) Implementations We can directly hash a key which points to the record Add a level of indirection: use an array of pointers to blocks to represent the buckets rather than an array holding data itself Static Hash Insertion and Deletion Bucket overflow can be handled naively by adding additional pointer to a separate block.</description></item><item><title>Hash Tables</title><link>https://www.brendanang.dev/Notes/Hash-Tables/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Hash-Tables/</guid><description>Hash Tables The problem with direct addressing: when the number of keys known to us is large, we are unable to map each key to their own slot.</description></item><item><title>Heap Sort</title><link>https://www.brendanang.dev/Notes/Heap-Sort/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Heap-Sort/</guid><description>Heap Sort General Idea Data structure based sorting algorithm using Heaps.
Makes use of the Partial Order Tree property: A tree is a maximising partial order tree if and only if each node has a key value greater than or equal to each of its child nodes.</description></item><item><title>Heaps</title><link>https://www.brendanang.dev/Notes/Heaps/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Heaps/</guid><description>Heaps A specialized tree based data structure.
Efficient data structure to implement a priority queue.
Implementations Binary Heap built with a Binary Tree: Operations Fix Heap (maximising) Method to obtain retain the heap structure after the root is removed.</description></item><item><title>Index Based Algorithms</title><link>https://www.brendanang.dev/Notes/Index-Based-Algorithms/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Index-Based-Algorithms/</guid><description>Index Based Algorithms Having an index on 1 or more attributes of a relation makes some algorithms more feasible.
[!</description></item><item><title>Insertion Sort</title><link>https://www.brendanang.dev/Notes/Insertion-Sort/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Insertion-Sort/</guid><description>Insertion Sort General Idea Incremental approach
Iterate through the array and maintain a sorted array in-place, at the start of the array.</description></item><item><title>Instruction Level Parallelism</title><link>https://www.brendanang.dev/Notes/Instruction-Level-Parallelism/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Instruction-Level-Parallelism/</guid><description>Instruction Level Parallelism We can group multiple independent instructions and execute them concurrently in different functional units of a single processor.</description></item><item><title>Instruction Set Architecture</title><link>https://www.brendanang.dev/Notes/Instruction-Set-Architecture/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Instruction-Set-Architecture/</guid><description>Instruction Set Architecture (ISA) A set of specifications a programmer must know to write correct and efficient programs for a specific machine</description></item><item><title>Instructions</title><link>https://www.brendanang.dev/Notes/Instructions/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Instructions/</guid><description>Instructions An example using the ARM ISA [!The datapaths shown below are examples given a single cycle datapath]
Register Type All data values are located in registers</description></item><item><title>Intelligent Agents</title><link>https://www.brendanang.dev/Notes/Intelligent-Agents/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Intelligent-Agents/</guid><description>Intelligent Agents Rational agents: make decisions based on maximising a specific value. Based on built-in knowledge about the environment
Autonomous agents: do not rely entirely on built-in knowledge.</description></item><item><title>Internet Protocol</title><link>https://www.brendanang.dev/Notes/Internet-Protocol/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Internet-Protocol/</guid><description>Internet Protocol (IP) A protocol designed to deliver datagrams from the source to destination host based on their addresses. It provides host-to-host routing and addressing.</description></item><item><title>Interrupts</title><link>https://www.brendanang.dev/Notes/Interrupts/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Interrupts/</guid><description>Interrupts An interrupt is a request for the processor to interrupt currently executing code so that the event can be processed in a timely manner.</description></item><item><title>IO Subsystem</title><link>https://www.brendanang.dev/Notes/IO-Subsystem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/IO-Subsystem/</guid><description>I/O Subsystem I/O Hardware The hardware communication between I/O devices and the CPU is done through the signal chain subsystem.</description></item><item><title>Iterative Deepening Search</title><link>https://www.brendanang.dev/Notes/Iterative-Deepening-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Iterative-Deepening-Search/</guid><description>Iterative Deepening Search</description></item><item><title>Knapsack Problem</title><link>https://www.brendanang.dev/Notes/Knapsack-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Knapsack-Problem/</guid><description>Knapsack Problem Given n items where the $i^{th}$ item has a weight $w_i$ and value $v_i$
Find the largest total value of items that fits in a knapsack of capacity $C$.</description></item><item><title>Knowledge Representation</title><link>https://www.brendanang.dev/Notes/Knowledge-Representation/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Knowledge-Representation/</guid><description>Knowledge Representation Representation of knowledge in a computer-tractable form. $$\begin{aligned}Logic=Representation+Inference\ Representation=Syntax+Semantics \end{aligned}$$ Entailment: generates sentences that are necessarily true given that existing sentences are true</description></item><item><title>Kruskal's Algorithm</title><link>https://www.brendanang.dev/Notes/Kruskals-Algorithm/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Kruskals-Algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm General Idea A greedy algorithm to generate a Minimum Spanning Tree using the Union Find data structure.</description></item><item><title>Layered Architecture</title><link>https://www.brendanang.dev/Notes/Layered-Architecture/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Layered-Architecture/</guid><description>Layered Architecture Pros Separation of concern: This allows us to focus on a smaller scope of problems in each layer, as opposed to looking at the problem across different layers Isolation: Each layer is decoupled, thus modifications in one layer will not affect downstream layers Changeability: Can easily replace one whole layer with another, while interface is still maintained Scalability Cons Performance overhead: more pronounced when more layers are added</description></item><item><title>Least Recently Used Policy</title><link>https://www.brendanang.dev/Notes/Least-Recently-Used-Policy/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Least-Recently-Used-Policy/</guid><description>Least Recently Used Policy (LRU) Keep track of when each item is accessed When an item needs to be replaced, we will choose the one that has the oldest timestamp LRU-K Rather than just taking the most recent access time for consideration, having a history of timestamps allows us to calculate the interarrival between references.</description></item><item><title>Longest Common Subsequence</title><link>https://www.brendanang.dev/Notes/Longest-Common-Subsequence/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Longest-Common-Subsequence/</guid><description>Longest Common Subsequence Problem Formulation Idea: The longest common subsequence up to certain position $i$ in the first sequence and $j$ in another sequence, can be found using the longest common sub sequences of the sequences up till $i-1$ and $j-1$.</description></item><item><title>Longest Increasing Subsequence</title><link>https://www.brendanang.dev/Notes/Longest-Increasing-Subsequence/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Longest-Increasing-Subsequence/</guid><description>Longest Increasing Subsequence Example Problem Formulation Satisfaction of the Principle of Optimality: The solution to a subsequence ending at index j can be found using the solutions from subsequence ending at index 0 to j-1.</description></item><item><title>Longest Path Problem</title><link>https://www.brendanang.dev/Notes/Longest-Path-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Longest-Path-Problem/</guid><description>Longest Path Problem It is the problem of finding a simple path of maximum length in a given graph.
Simple path: if it does not have any repeated vertices; the length of a path may either be measured by its number of edges, or (in weighted graphs) by the sum of the weights of its edges.</description></item><item><title>Making Change</title><link>https://www.brendanang.dev/Notes/Making-Change/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Making-Change/</guid><description>Making Change Problem Formulation [!NOTE] Note that The minimum number of coins to form value x, is 1 + the minimum of the solutions to value $x-d_1, x-d_2&amp;hellip;.</description></item><item><title>Maps</title><link>https://www.brendanang.dev/Notes/Maps/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Maps/</guid><description/></item><item><title>Markov Decision Process</title><link>https://www.brendanang.dev/Notes/Markov-Decision-Process/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Markov-Decision-Process/</guid><description>Components of MDP Formulating an MDP ![Pasted image 20220415223757](Pics/Pasted%20image%2020220415223757.png) ![Pasted image 20220415223941](Pics/Pasted%20image%2020220415223941.png) The Bellman Equation $$ V_{i+s}(s) =max_a(\sum_{s&amp;rsquo;} P(s&amp;rsquo;|s,a)(r(s,a,s&amp;rsquo;)+\gamma V(s&amp;rsquo;)) $$</description></item><item><title>Memory Organisation</title><link>https://www.brendanang.dev/Notes/Memory-Organisation/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Memory-Organisation/</guid><description>Memory Organisation Address Binding A program needs to be loaded into memory to run. The machine code that is generated needs to be mapped to memory addresses in the system.</description></item><item><title>Merge Sort</title><link>https://www.brendanang.dev/Notes/Merge-Sort/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Merge-Sort/</guid><description>Merge Sort General Idea Divide and Conquer
Divide the problem recursively into smaller (n/2) sub problems When only 1 element remains, this subproblem is considered trivially sorted Combine sorted subproblems together (backtracking) using a merge function.</description></item><item><title>Minimum Spanning Tree</title><link>https://www.brendanang.dev/Notes/Minimum-Spanning-Tree/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Minimum-Spanning-Tree/</guid><description>Minimum Spanning Tree A minimum-weight spanning tree in a weighted graph
Spanning tree: connected, acyclic subgraph containing all the vertices of a graph</description></item><item><title>Model-View-Controller Architecture</title><link>https://www.brendanang.dev/Notes/Model-View-Controller-Architecture/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Model-View-Controller-Architecture/</guid><description>MVC Architecture Design Problems Tight coupling between UI and application logic Observer Pattern: Need for UI to update when state changes Strategy Pattern: Need for UI to support different functionalities depending on the user input View:</description></item><item><title>Monte Carlo Policy</title><link>https://www.brendanang.dev/Notes/Monte-Carlo-Policy/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Monte-Carlo-Policy/</guid><description>Monte Carlo Estimate the value function from sampling: First visit MC: average returns only for first time (s,a) is visited in an episode/trial Repeated visits of (s,a) in the trial does not constitute a new learning condition</description></item><item><title>Multi Key Index</title><link>https://www.brendanang.dev/Notes/Multi-Key-Index/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Multi-Key-Index/</guid><description>Multi Key Indexes Motivation: we want to be able to have efficient queries on multiple attributes SELECT * WHERE DEPT = &amp;quot;TOY&amp;quot; AND SAL &amp;gt; 50 Geographic Data Build index on y and ax iteratively until each partition contains at most 2 records: Grid Index Issues:</description></item><item><title>Network Address Translation</title><link>https://www.brendanang.dev/Notes/Network-Address-Translation/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Network-Address-Translation/</guid><description>Network Address Translation IPv4 addresses are only 32 bits long which provides a maximum of 4.29 billion unique IP addresses.</description></item><item><title>Observer Pattern</title><link>https://www.brendanang.dev/Notes/Observer-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Observer-Pattern/</guid><description>Observer Pattern #design-patterns
Problems we want to solve Tight coupling due to a 1-many dependency We need a number of dependent objects to update automatically when one object changes state We need an object to notify a number of other objects Push / Pull Mechanisms **Pull</description></item><item><title>One Pass Algorithms</title><link>https://www.brendanang.dev/Notes/One-Pass-Algorithms/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/One-Pass-Algorithms/</guid><description>One Pass Algorithms Algorithms where the data is read only once from the disk.
Example using Select I/O Cost: B(R) Space: M &amp;gt;= 1 Duplicate Elimination I/O Cost: B(R) Space: $M-1 \ge B(distinct(R))$ Natural Join I/O Cost: B(R) + B(S) Space: $M-1 \ge min(B(R),B(S))$ Nested Loop Join Can be considered &amp;ldquo;one and a half pass algorithm&amp;rdquo;: One argument is read only once while another is read repeatedly</description></item><item><title>P and NP Problems</title><link>https://www.brendanang.dev/Notes/P-and-NP-Problems/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/P-and-NP-Problems/</guid><description>P and NP Problems Hard Problems: the best-known algorithm for the problem is expensive in terms of running time.
Classification of Problems Decision vs Optimization Additionally:</description></item><item><title>Page Replacement Policies</title><link>https://www.brendanang.dev/Notes/Page-Replacement-Policies/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Page-Replacement-Policies/</guid><description>Page Replacement Policies First In First Out Least Recently Used Policy Clock (or Second Chance) Policy</description></item><item><title>Pipelining</title><link>https://www.brendanang.dev/Notes/Pipelining/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Pipelining/</guid><description>Pipelining Datapath Pipelining makes use of extra registers between each pipeline in order to store the necessary data and control signals needed by the current instruction for the next stage.</description></item><item><title>Polynomial Time Complexity</title><link>https://www.brendanang.dev/Notes/Polynomial-Time-Complexity/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Polynomial-Time-Complexity/</guid><description>Polynomial Time Complexity Polynomial Bound: Worst case complexity is bounded by a polynomial function of input size
[!NOTE] Sorting algorithm that sorts arrays of 32-bit integers.</description></item><item><title>Prim's Algorithm</title><link>https://www.brendanang.dev/Notes/Prims-Algorithm/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Prims-Algorithm/</guid><description>Prim&amp;rsquo;s Algorithm ## General Idea It is a greedy algorithm to generate a [Minimum Spanning Tree](Notes/Minimum%20Spanning%20Tree.md). 1. Select the minimum weight edge from tree vertex to fringe vertex 2.</description></item><item><title>Principle of Optimality</title><link>https://www.brendanang.dev/Notes/Principle-of-Optimality/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Principle-of-Optimality/</guid><description>Principle of Optimality Principle of Optimality: An optimal policy has the property that whatever the initial state and initial decision are, the remaining decisions must constitute an optimal policy with regard to the state resulting from the first decision.</description></item><item><title>Probabilistic Analysis and Randomised Algorithms</title><link>https://www.brendanang.dev/Notes/Probabilistic-Analysis-and-Randomised-Algorithms/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Probabilistic-Analysis-and-Randomised-Algorithms/</guid><description>Probabilistic Analysis and Randomised Algorithms Exercises 5.1.2 Describe an implementation of the procedure RANDOM(a, b) that only makes calls to RANDOM(0, 1).</description></item><item><title>Process scheduling</title><link>https://www.brendanang.dev/Notes/Process-scheduling/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Process-scheduling/</guid><description>Process Scheduling A process execution alternates between CPU executions and I/O operations CPU Burst: duration of one CPU execution cycle I/O Burst: duration of one I/O operation (wait time) Types All processes are stored in queue structures Job queue: set of all processes with the same state in the system</description></item><item><title>Process Synchronization</title><link>https://www.brendanang.dev/Notes/Process-Synchronization/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Process-Synchronization/</guid><description>Process Synchronization Race Condition
Critical Section Problem One method to solve the race condition is to divide processes into critical sections which are segments that shared data is accessed.</description></item><item><title>Processes</title><link>https://www.brendanang.dev/Notes/Processes/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Processes/</guid><description>Processes A program in execution, also known as a job. One process can have multiple threads.
Process in memory Sizes of text and data sections are fixed Stack can grow and shrink dynamically: each time a function is called, an activation record is pushed to the stack and popped when the function returns Heap can grow and shrink dynamically: changes as memory is dynamically allocated in runtime Information related to each process is then stored in a Process Control Block (PCB) Process states New: The process is being created Running: Instructions are being executed Waiting: The process is waiting for I/O or event Ready: The process is ready to run, but is waiting to be assigned to the CPU Terminated: The process has completed [!</description></item><item><title>Proof By Contradiction</title><link>https://www.brendanang.dev/Notes/Proof-By-Contradiction/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Proof-By-Contradiction/</guid><description>Proof By Contradiction #logic
The proposition to be proved,Â P, is assumed to be false. That is,Â $\neg$PÂ is true.</description></item><item><title>Propositional Logic</title><link>https://www.brendanang.dev/Notes/Propositional-Logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Propositional-Logic/</guid><description>Propositional Logic Operator Precedence</description></item><item><title>Pseudo-Polynomial Time Complexity</title><link>https://www.brendanang.dev/Notes/Pseudo-Polynomial-Time-Complexity/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Pseudo-Polynomial-Time-Complexity/</guid><description>Pseudo-Polynomial Time Complexity The runtime is some polynomialÂ in the numeric value of the input, rather than in the number of bits required to represent it.</description></item><item><title>Q-Learning</title><link>https://www.brendanang.dev/Notes/Q-Learning/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Q-Learning/</guid><description>Q Learning Use temporal difference to update Q values at each time difference when the agent interacts with the environment.</description></item><item><title>Query Compiler</title><link>https://www.brendanang.dev/Notes/Query-Compiler/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Query-Compiler/</guid><description>Query Compiler An SQL query is declarative - does not specify the procedure for query execution. The compiler is responsible for transforming a query into a set of instructions:</description></item><item><title>Query Execution</title><link>https://www.brendanang.dev/Notes/Query-Execution/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Query-Execution/</guid><description>Query Execution How do database management systems execute a particular query plan?
Expression Evaluation Represent queries in the form of an expression tree.</description></item><item><title>Query Optimisation</title><link>https://www.brendanang.dev/Notes/Query-Optimisation/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Query-Optimisation/</guid><description>Query Optimisation Algebraic Laws for Improving Query Plans Laws Involving Join Converting Selection and Product to Joins Laws Involving Selection If R is not a set (it is a bag which can contain duplicates) then the union operation will not eliminate duplicates correctly.</description></item><item><title>Query Processing</title><link>https://www.brendanang.dev/Notes/Query-Processing/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Query-Processing/</guid><description>Query Processing Given a query, we need to devise an algorithm to obtain the desired result
Example Select B, D From R, S Where R.</description></item><item><title>Quick Sort</title><link>https://www.brendanang.dev/Notes/Quick-Sort/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Quick-Sort/</guid><description>Quick Sort General Idea Select a pivot element Partition the input into 2 halves (1 that is lower than the pivot, 1 that is higher than the pivot) At each partition we end up with an array that is sorted relative to the pivot (pivot is in the final position) Recursively do the same for each half until we reach subarrays of 1 element.</description></item><item><title>Rabin-Karp Algorithm</title><link>https://www.brendanang.dev/Notes/Rabin-Karp-Algorithm/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Rabin-Karp-Algorithm/</guid><description>Rabin-Karp Algorithm General Idea Convert the pattern (length m) to a number p Convert the first m-characters (the first text window) to a number t with a hash function If p and t are equal, there is possibility of pattern: verify against the actual pattern Rolling hash function: shift the text window one character to the right and convert the new string Repeat until pattern is found or exit Rolling hash function The new hash value can be calculated in $\theta(m)$ time.</description></item><item><title>Race Condition</title><link>https://www.brendanang.dev/Notes/Race-Condition/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Race-Condition/</guid><description>Race Condition Access to shared data from concurrent processes resulting in data inconsistency. This is due to context switches between concurrent processes which result in non-sequential order of execution.</description></item><item><title>Real Time Operating Systems</title><link>https://www.brendanang.dev/Notes/Real-Time-Operating-Systems/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Real-Time-Operating-Systems/</guid><description>Real Time OS Systems whose correctness depends not only on logical aspects but also on the temporal aspects i.e. able to meet specific deadlines.</description></item><item><title>Recurrence Equations</title><link>https://www.brendanang.dev/Notes/Recurrence-Equations/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Recurrence-Equations/</guid><description>Recurrence Equations Iteration Method Solve using algebra [!NOTE] Important formulas to remember Arithmetic summation series: $$a+a+d+a+2d&amp;hellip;+a+(n-1)d=\frac{n}{2}(2a+(n-1)d)$$ Geometric series summation: $$a+ar+ar^2+&amp;hellip;ar^{n-1}=a(\frac{1-r^n}{1-r})$$</description></item><item><title>Sequence Diagrams</title><link>https://www.brendanang.dev/Notes/Sequence-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Sequence-Diagrams/</guid><description>Sequence Diagrams A sequence diagram captures the interactions between multiple objects for a given scenario.
Notation:
Common notation errors Activation bar too long:Â The activation bar of a method cannot start before the method call arrives and a method cannot remain active after the method has returned.</description></item><item><title>Shortest Path Problem</title><link>https://www.brendanang.dev/Notes/Shortest-Path-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Shortest-Path-Problem/</guid><description>Shortest Path Problem InÂ graph theory, theÂ shortest path problemÂ is the problem of finding aÂ pathÂ between twoÂ verticesÂ (or nodes) in aÂ graphÂ such that the sum of theÂ weightsÂ of its constituent edges is minimized.</description></item><item><title>Signal Chain Subsystem</title><link>https://www.brendanang.dev/Notes/Signal-Chain-Subsystem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Signal-Chain-Subsystem/</guid><description>Signal Chain Subsystem The signal chain subsystem is concerned about how hardware in computer systems communicate.
Factors affecting signal transfer Signal Skew When the signal of one or more data lines takes a different amount of time to reach the receiver, resulting in wrong data latched by the receiver.</description></item><item><title>State Machine Diagrams</title><link>https://www.brendanang.dev/Notes/State-Machine-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/State-Machine-Diagrams/</guid><description>State Machine Diagrams Also called a Dialog Map.</description></item><item><title>Stock Valuation</title><link>https://www.brendanang.dev/Notes/Stock-Valuation/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Stock-Valuation/</guid><description>Stock Valuation [!NOTE] Relationships between stock price
Positively related to the growth of the firm (future cash flows increase at a faster rate) Negatively related to discount rate (higher discount rate lead to smaller PV of cashflows) Negatively related to risk (risk lead to higher discount rates) Calculating stock price</description></item><item><title>Storage</title><link>https://www.brendanang.dev/Notes/Storage/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Storage/</guid><description>Storage Random Access Memory Memory is said to be RAM if the time to access the data is the same irrespective of the physical locations of the data.</description></item><item><title>Strategy Pattern</title><link>https://www.brendanang.dev/Notes/Strategy-Pattern/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Strategy-Pattern/</guid><description>Strategy Pattern #design-patterns
Problems we want to solve A set of interchangeable algorithms or objects that can be decided at run-time Extensible set of strategies: Open-Closed Principle Context refers or uses the Strategy interface for performing the algorithm.</description></item><item><title>Strings</title><link>https://www.brendanang.dev/Notes/Strings/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Strings/</guid><description>Strings Immutability String assignment will not create a new copy of the string. Only string concatenation will create a new buffer for the string.</description></item><item><title>Thread Level Parallelism</title><link>https://www.brendanang.dev/Notes/Thread-Level-Parallelism/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Thread-Level-Parallelism/</guid><description>Thread Level Parallelism Distribute the workload among a set of concurrently running threads. Uses MIMD model.
Multicore Processors Not to be confused with multiprocessors:</description></item><item><title>Threads</title><link>https://www.brendanang.dev/Notes/Threads/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Threads/</guid><description>Threads A thread (or lightweight process) consists of its own thread id, program counter, registers and stack space. However it shares the same data and code as the parent process.</description></item><item><title>Transaction Management</title><link>https://www.brendanang.dev/Notes/Transaction-Management/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Transaction-Management/</guid><description>Transaction Management Transactions are the basic unit of change in a DBMS. It is essential for data recovery and concurrency control.</description></item><item><title>Transmission Control Protocol</title><link>https://www.brendanang.dev/Notes/Transmission-Control-Protocol/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Transmission-Control-Protocol/</guid><description>Transmission Control Protocol (TCP) TCP is the transport layer above the internet protocol, providing an abstraction of a reliable network running over an unreliable channel, hiding most of the complexity of network communication.</description></item><item><title>Travelling Salesman Problem</title><link>https://www.brendanang.dev/Notes/Travelling-Salesman-Problem/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Travelling-Salesman-Problem/</guid><description>Travelling Salesman Problem &amp;ldquo;Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?</description></item><item><title>Two Pass Algorithms</title><link>https://www.brendanang.dev/Notes/Two-Pass-Algorithms/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Two-Pass-Algorithms/</guid><description>Two Pass Algorithms The entirety of your data might not always fit in main memory. Two pass algorithms are a class of algorithms used to break down data into chunks which fit into main memory where we can then apply operations.</description></item><item><title>TypeScript</title><link>https://www.brendanang.dev/Notes/TypeScript/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/TypeScript/</guid><description>TypeScript TypeScript is a superset of JavaScript, with all the features of JavaScript + a type checking layer.
Why TypeScript TypeScript helps to combat common errors:</description></item><item><title>Uniform Cost Search</title><link>https://www.brendanang.dev/Notes/Uniform-Cost-Search/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Uniform-Cost-Search/</guid><description>Uniform Cost Search Take the full path cost to the node as g(n)
Terminate when a goal node is found.</description></item><item><title>Union Find</title><link>https://www.brendanang.dev/Notes/Union-Find/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Union-Find/</guid><description>Union Find A data structure to represent dynamic equivalence relations Operations These operations make it an efficient data structure to verify if a cycle exists in some undirected graph.</description></item><item><title>Use Case Diagrams</title><link>https://www.brendanang.dev/Notes/Use-Case-Diagrams/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Use-Case-Diagrams/</guid><description>Use Case Diagram Associations extend The extending use case is dependent on the base use case; it literally extends the behaviour described by the base use case.</description></item><item><title>User Datagram Protocol</title><link>https://www.brendanang.dev/Notes/User-Datagram-Protocol/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/User-Datagram-Protocol/</guid><description>User Datagram Protocol (UDP) UDP is a barebones transport protocol. Aside from the multiplexing/demultiplexing function and some light error checking, it adds nothing to IP.</description></item><item><title>Virtual Memory</title><link>https://www.brendanang.dev/Notes/Virtual-Memory/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Virtual-Memory/</guid><description>Virtual Memory In memory organisation, we assumed that for each program, its entirety has to be loaded into the memory. This means that the overall program size must be restricted to the size of physical memory.</description></item><item><title>Virtualization</title><link>https://www.brendanang.dev/Notes/Virtualization/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/Virtualization/</guid><description>Virtualization A technique that uses software called Hypervisor (virtual machine manager or VMM) to create abstraction of hardware.
Hardware is divided into multiple virtual computers, called Virtual Machines (VMs) Each VM runs its own OS, called Guest OS, and behaves like an independent computer !</description></item><item><title>White Box Testing</title><link>https://www.brendanang.dev/Notes/White-Box-Testing/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.brendanang.dev/Notes/White-Box-Testing/</guid><description>White Box Testing #testing
Testing of implementation details, internal paths and structure. Contrast to Black Box Testing
Control Flow Testing The Control Flow Graph Cyclomatic Complexity Measurement of complexity based on the number of decision points.</description></item></channel></rss>